// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int                 @id @default(autoincrement())
  username          String              @unique
  password          String
  rating            Int                 @default(0)
  info              String?
  description       String?
  refreshToken      String?
  avatar            String?
  role              Role                @default(USER)
  posts             Post[]
  comments          Comment[]
  userLikedPosts    UserLikedPosts[]
  userLikedComments UserLikedComments[]
}

model UserLikedPosts {
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId Int
  post   Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  status Int  @default(0)

  @@id([userId, postId])
}

model Post {
  id                Int                @id @default(autoincrement())
  title             String
  shortDescription  String
  previewImageCover String
  comments          Comment[]
  author            User               @relation(fields: [authorId], references: [id], onDelete: Cascade)
  authorId          Int
  postContent       PostContent        @relation(fields: [postContentId], references: [id])
  postContentId     Int                @unique
  categories        CategoriesOnPost[]
  rating            Int                @default(0)
  createdAt         DateTime           @default(now())
  userLikedPosts    UserLikedPosts[]
}

model PostContent {
  id      Int    @id @default(autoincrement())
  content String @default("")
  post    Post?
}

model CategoriesOnPost {
  postId     Int
  categoryId Int
  post       Post     @relation(fields: [postId], references: [id], onDelete: Cascade)
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

  @@id([postId, categoryId])
}

model Category {
  id               Int                @id @default(autoincrement())
  name             String
  CategoriesOnPost CategoriesOnPost[]
}

model UserLikedComments {
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    Int
  comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int
  status    Int     @default(0)

  @@id([userId, commentId])
}

model Comment {
  id                Int                 @id @default(autoincrement())
  text              String
  post              Post                @relation(fields: [postId], references: [id])
  user              User                @relation(fields: [authorId], references: [id])
  rating            Int                 @default(0)
  createdAt         DateTime            @default(now())
  postId            Int
  authorId          Int
  userLikedComments UserLikedComments[]
}

enum Role {
  USER
  ADMIN
}
